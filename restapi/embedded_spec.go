// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Image modifications in Direktiv",
    "title": "image-magick",
    "version": "1.0.0",
    "x-direktiv-meta": {
      "category": "Tools",
      "container": "direktiv/image-magick",
      "issues": "https://github.com/direktiv-apps/image-magick/issues",
      "license": "[Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)",
      "long-description": "This app can run multiple [Image Magick](https://imagemagick.org/index.php) commands. \nThe results can either be stored in the output folder of Direktiv to store them as variables or returned as base64.",
      "maintainer": "[direktiv.io](https://www.direktiv.io)",
      "url": "https://github.com/direktiv-apps/image-magick"
    }
  },
  "paths": {
    "/": {
      "post": {
        "parameters": [
          {
            "type": "string",
            "description": "direktiv action id is an UUID. \nFor development it can be set to 'development'\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          },
          {
            "type": "string",
            "description": "direktiv temp dir is the working directory for that request\nFor development it can be set to e.g. '/tmp'\n",
            "name": "Direktiv-TempDir",
            "in": "header"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "commands"
              ],
              "properties": {
                "commands": {
                  "description": "List of commands to run",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "convert mypic.png -resize 200x100 mypic.jpg"
                },
                "return": {
                  "description": "Returns the images as base64",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "myimage.jpg"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "nice greeting",
            "schema": {
              "type": "object",
              "properties": {
                "commands": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "result": {
                        "additionalProperties": false
                      },
                      "success": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                "images": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "result": {
                        "type": "string"
                      },
                      "success": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "example": {
                "greeting": "Hello YourName"
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Direktiv-ErrorCode": {
                "type": "string"
              },
              "Direktiv-ErrorMessage": {
                "type": "string"
              }
            }
          }
        },
        "x-direktiv": {
          "cmds": [
            {
              "action": "foreach",
              "exec": "{{ .Item }}",
              "loop": ".Commands"
            },
            {
              "action": "foreach",
              "exec": "base64 -w 0 {{ .Item }}",
              "loop": ".Return",
              "silent": true
            }
          ],
          "debug": true,
          "output": "{\n  \"commands\": {{ index . 0 | toJson }}\n  {{ $l := len (index . 1) }}\n  {{- if gt $l 0 }}\n  , \"images\": {{ index . 1 | toJson }}\n  {{- end }}\n}\n"
        },
        "x-direktiv-errors": {
          "io.direktiv.command.error": "Command execution failed",
          "io.direktiv.output.error": "Template error for output generation of the service",
          "io.direktiv.ri.error": "Can not create information object from request"
        },
        "x-direktiv-examples": [
          {
            "content": "- id: img\n     type: action\n     action:\n       function: image-magick\n       input:\n         commands:\n           - convert mypic.png json:\n           - convert mypic.png -fuzz 25% -fill red -opaque white -flatten mypic.png\n           - convert mypic.png -resize 200x100 mypic.jpg\n         return:\n           - mypic.png",
            "title": "Basic"
          },
          {
            "content": "- id: set\n     type: setter\n     variables:\n     - key: mypic.png\n       scope: workflow\n       mimeType: application/octet-stream\n       value: iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAH0lEQVR42mNk+P+/noGKgHHUwFEDRw0cNXDUwJFqIAAczzHZPJWe1QAAAABJRU5ErkJggg==\n     transition: modify\n   - id: modify \n     type: action\n     action:\n       function: image\n       files:\n         - key: mypic.png\n           scope: workflow\n       input: \n         commands:\n           # stores the image in workflow scope variable ` + "`" + `resized.png` + "`" + `\n           - convert mypic.png -resize 200% out/workflow/resized.png ",
            "title": "File Resize"
          }
        ],
        "x-direktiv-function": "functions:\n  - id: image-magick\n    image: direktiv/image-magick\n    type: knative-workflow"
      },
      "delete": {
        "parameters": [
          {
            "type": "string",
            "description": "On cancel Direktiv sends a DELETE request to\nthe action with id in the header\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-direktiv": {
          "cancel": "echo 'cancel {{ .DirektivActionID }}'"
        }
      }
    }
  },
  "definitions": {
    "direktivFile": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "github.com/direktiv/apps/go/pkg/apps"
        },
        "type": "DirektivFile"
      }
    },
    "error": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Image modifications in Direktiv",
    "title": "image-magick",
    "version": "1.0.0",
    "x-direktiv-meta": {
      "category": "Tools",
      "container": "direktiv/image-magick",
      "issues": "https://github.com/direktiv-apps/image-magick/issues",
      "license": "[Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)",
      "long-description": "This app can run multiple [Image Magick](https://imagemagick.org/index.php) commands. \nThe results can either be stored in the output folder of Direktiv to store them as variables or returned as base64.",
      "maintainer": "[direktiv.io](https://www.direktiv.io)",
      "url": "https://github.com/direktiv-apps/image-magick"
    }
  },
  "paths": {
    "/": {
      "post": {
        "parameters": [
          {
            "type": "string",
            "description": "direktiv action id is an UUID. \nFor development it can be set to 'development'\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          },
          {
            "type": "string",
            "description": "direktiv temp dir is the working directory for that request\nFor development it can be set to e.g. '/tmp'\n",
            "name": "Direktiv-TempDir",
            "in": "header"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "commands"
              ],
              "properties": {
                "commands": {
                  "description": "List of commands to run",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "convert mypic.png -resize 200x100 mypic.jpg"
                },
                "return": {
                  "description": "Returns the images as base64",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": "myimage.jpg"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "nice greeting",
            "schema": {
              "type": "object",
              "properties": {
                "commands": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CommandsItems0"
                  }
                },
                "images": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ImagesItems0"
                  }
                }
              },
              "example": {
                "greeting": "Hello YourName"
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            },
            "headers": {
              "Direktiv-ErrorCode": {
                "type": "string"
              },
              "Direktiv-ErrorMessage": {
                "type": "string"
              }
            }
          }
        },
        "x-direktiv": {
          "cmds": [
            {
              "action": "foreach",
              "exec": "{{ .Item }}",
              "loop": ".Commands"
            },
            {
              "action": "foreach",
              "exec": "base64 -w 0 {{ .Item }}",
              "loop": ".Return",
              "silent": true
            }
          ],
          "debug": true,
          "output": "{\n  \"commands\": {{ index . 0 | toJson }}\n  {{ $l := len (index . 1) }}\n  {{- if gt $l 0 }}\n  , \"images\": {{ index . 1 | toJson }}\n  {{- end }}\n}\n"
        },
        "x-direktiv-errors": {
          "io.direktiv.command.error": "Command execution failed",
          "io.direktiv.output.error": "Template error for output generation of the service",
          "io.direktiv.ri.error": "Can not create information object from request"
        },
        "x-direktiv-examples": [
          {
            "content": "- id: img\n     type: action\n     action:\n       function: image-magick\n       input:\n         commands:\n           - convert mypic.png json:\n           - convert mypic.png -fuzz 25% -fill red -opaque white -flatten mypic.png\n           - convert mypic.png -resize 200x100 mypic.jpg\n         return:\n           - mypic.png",
            "title": "Basic"
          },
          {
            "content": "- id: set\n     type: setter\n     variables:\n     - key: mypic.png\n       scope: workflow\n       mimeType: application/octet-stream\n       value: iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAH0lEQVR42mNk+P+/noGKgHHUwFEDRw0cNXDUwJFqIAAczzHZPJWe1QAAAABJRU5ErkJggg==\n     transition: modify\n   - id: modify \n     type: action\n     action:\n       function: image\n       files:\n         - key: mypic.png\n           scope: workflow\n       input: \n         commands:\n           # stores the image in workflow scope variable ` + "`" + `resized.png` + "`" + `\n           - convert mypic.png -resize 200% out/workflow/resized.png ",
            "title": "File Resize"
          }
        ],
        "x-direktiv-function": "functions:\n  - id: image-magick\n    image: direktiv/image-magick\n    type: knative-workflow"
      },
      "delete": {
        "parameters": [
          {
            "type": "string",
            "description": "On cancel Direktiv sends a DELETE request to\nthe action with id in the header\n",
            "name": "Direktiv-ActionID",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-direktiv": {
          "cancel": "echo 'cancel {{ .DirektivActionID }}'"
        }
      }
    }
  },
  "definitions": {
    "CommandsItems0": {
      "type": "object",
      "properties": {
        "result": {
          "additionalProperties": false
        },
        "success": {
          "type": "boolean"
        }
      }
    },
    "ImagesItems0": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      }
    },
    "direktivFile": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "github.com/direktiv/apps/go/pkg/apps"
        },
        "type": "DirektivFile"
      }
    },
    "error": {
      "type": "object",
      "required": [
        "errorCode",
        "errorMessage"
      ],
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    }
  }
}`))
}
